{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAwCeA,EArCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAoBvC,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SAEI,uBACIO,KAAK,OACLC,MAAST,EACTU,SAtBc,SAAEP,GAExBF,EAAeE,EAAEQ,OAAOF,QAqBhBG,YAAY,mB,+BC7BXC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,gDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCoBTO,EAlBK,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAG/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BACMA,QC6CHO,EAjDC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECHJ,SAAEA,GAAe,IAAD,EACdf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KA8BxC,OAxBAC,qBAAU,WACNxB,EAAQC,GACPwB,MAAM,SAAAC,GAICH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAOtB,CAAEpB,IASEqB,EDnByBK,CAAc1B,GAAjCyB,EARe,EAQpBlB,KAAYa,EARQ,EAQRA,QAcpB,OACI,qCACA,oBAAIJ,UAAU,qCAAd,SAAqDhB,IAGnDoB,GAAW,mBAAGJ,UAAU,oCAAb,yBAEb,qBAAMA,UAAU,YAAhB,SAEYS,EAAKhB,KAAK,SAAAC,GAAG,OAER,cAAC,EAAD,eAGKA,GAFEA,EAAIC,aEpCvBgB,EAAe,WAAO,IAAD,EAEO1C,mBAAS,CAAC,UAFjB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAU9B,OACI,qCACI,oBAAIgC,UAAU,qCAAd,gDAEA,cAAC,EAAD,CAAahC,cAAkBA,IAC/B,uBACA,6BACM4C,EAAWnB,KAAK,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MClBnC6B,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.c5d990db.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ( {setCategories} ) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) => {\r\n        // console.log(e.target.value);\r\n        setInputValue( e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        //console.log('Submit hecho');\r\n        // trim para borrar espacios en blanco antes y despues\r\n        if(inputValue.trim().length > 2 ) {\r\n            setCategories( cat => [inputValue, ...cat  ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            {/* <h2>{inputValue}</h2> */}\r\n            <input \r\n                type=\"text\"\r\n                value = {inputValue}\r\n                onChange = {handleInputChange}\r\n                placeholder=\"Search here\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","\r\n    export const getGifs = async(category) => {\r\n        // encodeURI reemplaza espacios por % para realizar peticiones de bÃºsqueda\r\n        const url = `http://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=gf4g9mGbiJeLffv8SPJyt47sCA7ivE9M&limit=10`\r\n        const resp = await fetch(url);\r\n        const {data} = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        // console.log(gifs);\r\n        return gifs;\r\n        //setImages(gifs);\r\n    }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ( { id, title, url }) => { // ( props) => {\r\n    // console.log(props.img);\r\n    // console.log(id , title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt= {title} /> \r\n            <p>\r\n                { title }\r\n            </p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGridItem\r\n","import React/* , { useState,  useEffect} */ from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n\r\n    //const state = useFetchGifs();\r\n    //console.log(state);\r\n//desestructuracion\r\n    // const { data, loading } = useFetchGifs();\r\n    // console.log(data);\r\n\r\n    const { data:imgs , loading } = useFetchGifs( category );\r\n    // console.log(loading);\r\n\r\n\r\n\r\n/* \r\n     const [ images, setImages] =  useState([]);\r\n\r\n    // useEffect para poner condiciones que se ejecute algo\r\n    useEffect( () => {\r\n        getGifs(category)\r\n        .then( setImages)// es lo mismo que  .then( imgs=> setImages(imgs) )\r\n    }, [ category ]) // [] para que se ejecute una sola vez\r\n */\r\n    return (\r\n        <>\r\n        <h3 className=\" animate__animated animate__fadeIn\" >{category}</h3>\r\n\r\n        {/* { loading ?  'Cargando ...' : 'Data cargada' } */}\r\n        { loading && <p className=\" animate__animated animate__flash\" >Loading ...</p> }\r\n\r\n        <div  className=\"card-grid\">                    \r\n                {\r\n                    imgs.map( img => (\r\n                \r\n                         <GifGridItem \r\n                         key = {img.id}\r\n                         // img = {img} \r\n                         { ...img }\r\n                         />\r\n                    ))\r\n                }            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n\r\n}\r\n\r\nexport default GifGrid\r\n","import {useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then( imgs => {\r\n\r\n            //setTimeout(() => {\r\n                //console.log(imgs);\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })                \r\n            //}, 2000);\r\n\r\n        }\r\n            \r\n        )\r\n    }, [ category])\r\n/* \r\n    setTimeout(() => {\r\n        setState({\r\n            data: [1,2,3],\r\n            loading: false\r\n        })\r\n    }, 3000); */\r\n\r\n    return state; // { data:[], loading: true}\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] =  useState(['Homer']);\r\n\r\n\r\n    /* const handleAdd = () => {\r\n        // setCategories([ ...categories , 'Hunter'])\r\n        setCategories( cat => [...categories , 'Hunter']);\r\n    } */\r\n\r\n    return ( \r\n        <>\r\n            <h2 className=\" animate__animated animate__fadeIn\">GifExpertApp - djgarciab@gmail.com</h2>        \r\n            {/* <button onClick={handleAdd} >Agregar</button> */}\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr />\r\n            <ol>\r\n                { categories.map( category => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category}\r\n                        />\r\n                    )  \r\n                )}\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render( <GifExpertApp /> ,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}